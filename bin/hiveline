#!/usr/bin/ruby

require 'date'
require 'optparse'
require 'hiveline'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"

  opts.on("-u", "--username", "Login username") do |username|
    options[:username] = username
  end

  opts.on("-p", "--password", "Login password") do |password|
    options[:password] = password
  end

  opts.on("-h", "--history", "History") do
    options[:history] = true
  end
end.parse!

username = options[:username] || ENV["HIVE_USERNAME"]

if username.nil?
	print "Please provide a username with a flag (-u) or as an environment variable exports HIVE_USERNAME=\"your_username\"\n"
	exit false
end

password = options[:password] || ENV["HIVE_PASSWORD"]

if password.nil?
	print "Please provide a password with a flag (-p) or as an environment variable exports HIVE_PASSWORD=\"your_password\"\n"
	exit false
end

client = Hiveline::Client.new(username, password)

command = ARGV.last

def unknown_error
  print "Something went wrong. Not sure what though because the API is not documented... maybe get up and go check your thermostat?\n"
end

def numeric?(number)
  return true if number =~ /^\d+$/
  true if Float(number) rescue false
end

def set_temperature(client, temp)
  print "Setting temperature to #{temp}°C\n"
  response_success = client.set_temperature(temp)
  if response_success
    print "Successfully updated temperature. Set to #{temp}°C\n"
  else
    unknown_error
  end
end

def lookup_temperature(client)
  print "Retrieving temperature information\n"
  environment = client.get_temperature
  inside = environment["inside"]
  outside = environment["outside"]
  unless environment.nil?
    print "Inside Temperature: #{inside["now"]}°C (#{inside["averages"]["today"]}°C todays average)\n"
    print "Outide Temperature: #{outside["now"]}°C (#{outside["weather"]["description"]})\n"
  else
    unknown_error
  end
end

def lookup_history(client)
  print "Retrieving history\n"
  history = client.get_history
  unless history.nil?
    history
  else
    unknown_error
  end
end

if numeric?(command)
  set_temperature client, command
  exit
end

def pretty_print_temp(p, max)
  max_width = 35
  d = DateTime.parse(p["date"])
  print d.strftime("%H %p ")
  temp = p["temperature"]
  if temp.instance_of? String
    print "\n"
    return
  end
  bar_length = ((temp / max) * max_width).round
  bar_length.times { print '=' }
  (max_width - bar_length).times { print ' ' }
  print " #{p["temperature"].round(1)}°C"
  print "\n"
end

if options[:history]
  history = lookup_history client
  max = history["data"].map do |p| 
    temp = p["temperature"]
    if temp.instance_of? String 
      0
    else
      temp
    end
  end.max
  history["data"]
    .reject { |p| DateTime.parse(p["date"]).strftime("%M") != "00" }
    .each { |p| pretty_print_temp p, max }
  exit
end

lookup_temperature client
