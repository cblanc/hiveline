#!/usr/bin/ruby

require 'optparse'
require 'hiveline'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"

  opts.on("-u", "--username", "Login username") do |username|
    options[:username] = username
  end

  opts.on("-p", "--password", "Login password") do |password|
    options[:password] = password
  end
end.parse!

username = options[:username] || ENV["HIVE_USERNAME"]

if username.nil?
	print "Please provide a username with a flag (-u) or as an environment variable exports HIVE_USERNAME=\"your_username\"\n"
	exit false
end

password = options[:password] || ENV["HIVE_PASSWORD"]

if password.nil?
	print "Please provide a password with a flag (-p) or as an environment variable exports HIVE_PASSWORD=\"your_password\"\n"
	exit false
end

client = Hiveline::Client.new(username, password)

command = ARGV.last

def unknown_error
  print "Something went wrong. Not sure what though because the API is not documented... maybe get up and go check your thermostat?\n"
end

def numeric?(number)
  return true if number =~ /^\d+$/
  true if Float(number) rescue false
end

def set_temperature(client, temp)
  prints "Setting temperature to #{temp}째C\n"
  temperature = client.set_temperature(temp)
  unless temperature.nil?
    print "Successfully updated temperature. Set to #{temperature}째C\n"
  else
    unknown_error
  end
end

def lookup_temperature(client)
  prints "Retrieving temperature information\n"
  environment = client.get_temperature
  unless environment.nil?
    print "Inside Temperature: #{environment["inside"]}째C\n"
    print "Weather in #{environment["city"]}: #{environment['weather'].split('_').map{|e| e.capitalize}.join(" ")} (#{environment["outside"]}째C)\n"
  else
    unknown_error
  end
end

if numeric?(command)
  set_temperature(client, command)
  exit
end

lookup_temperature(client)
